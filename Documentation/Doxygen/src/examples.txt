/**
\page zTExamples Examples

The following projects are available in the CMSIS-Zone repository on GitHub: https://github.com/ARM-software/CMSIS-Zone/tree/main/Examples.
These examples demonstrate the usage of the CMSIS-Zone utility.

| Example                    | Description                                                    |
|:---------------------------|:---------------------------------------------------------------|
| \subpage zTEMuscaA1        | Musca A1 (Cortex-M33) project with TrustZone setup             |
| \subpage zTEMuscaS1        | Musca S1 (Cortex-M33) project with TrustZone setup             |
| \subpage zTEM2351          | Single processor Cortex-M23 project with TrustZone setup       |
| \subpage zTELPC55          | Single processor Cortex-M33 project with TrustZone setup       |
| \subpage zTESTM32L5        | Single processor Cortex-M33 project with TrustZone setup       |
| \subpage zTESAML11         | Single processor Cortex-M23 project with TrustZone setup       |
| \subpage zTEMCB400         | Single processor Cortex-M3 project with MPU setup              |


\section zTExImport Import examples

Import the examples to Eclipse using the following flow:
- Go to <b>File - Import</b> and select <b>General - Existing Projects into Workspace</b>:

\image html import_from_file.png

Click \b Next.

Browse to the root directory, for example "Examples\LPC55S69\Zone", and select the project that you want to import. The import
projects window shows the available projects:

\image html import_projects.png

Click \b Finish. The project is imported and opened in the \ref zTProjEx.
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zTEMuscaA1 Arm Musca-A1

This example shows how to do the \ref UseCase_TrustZone. It is split into a secure and non-secure part. Using
CMSIS-Zone, it generates:
 - A header file that contains \#defines to control the various linker scatter files (and might be used in other parts of the
   application).
 - Memory protection controller (MPC) setup.
 - Peripheral protection controller (PPC) and related interrupt setup.
 - Secure attribution unit (SAU) setup.


\section zTEMuscaA1_Eclipse Using the CMSIS-Zone project

  - \ref zTExImport "Import" the project "Examples\Musca-A1\Zone" into the CMSIS-Zone utility
  - \ref zTProjEx "Open" the Musca-A1.azone file
  - \ref zTUIGenerate "Generate" the related output files

The Musca-A1.azone file of that project has the following configuration settings:
  - \ref zTUICreate "Added the zones" \c SecureFW and \c NonsecureFW
  - \ref zTUIMemAdd "Created the memory regions" \c SecureRAM, \c NonsecureRAM, \c ScureCode, \c Veneer, and \c NonsecureCode
  - Selected various memory regions and peripherals for using in the different zones.

\image html muscaA1_zones.png

The zones use different Flash and SRAM regions for code and data. Peripherals, such as the system and IO configuration, as
well as UART0 are available in the secure world only. To generate the output, click on the \ref zTUIGenerate "Generate"
button in the Zone Editor tool bar. This creates the following files in the \c ftl_gen directory:

| Template File        | Generated File   | Description |
|:---------------------|:-----------------|:-------------|
| dump_fzone.txt.ftl   | dump_fzone.txt   | Contains the complete model  |
| helper.ftlinc        | N/A              | Helper template file with FTL functions. |
| mem_layout.h.ftl     | mem_layout.h     | Header file that contains the memory region definitions, for example for the linker scatter file. |
| tz_sau_nvic.c.ftl    | tz_sau_nvic.c    | Configuration of the secure attribution unit (SAU) and the NVIC interrupt assignment. |
| tz_mpc_ppc.c.ftl     | tz_mpc_ppc.c     | Configuration of the memory (MPC) and peripheral (PPC) protection controller. |

These files can be used in any IDE to create the final application.
*/

/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zTEMuscaS1 Arm Musca-S1

This example shows how to do the \ref UseCase_TrustZone. It is split into a secure and non-secure part. Using
CMSIS-Zone, it generates:
 - A header file that contains \#defines to control the various linker scatter files (and might be used in other parts of the application).
 - Memory protection controller (MPC) setup.
 - Peripheral protection controller (PPC) and related interrupt setup.
 - Secure attribution unit (SAU) setup.


\section zTEMuscaS1_Eclipse Using the CMSIS-Zone project

  - \ref zTExImport "Import" the project "Examples\Musca-AS\Zone" into the CMSIS-Zone utility
  - \ref zTProjEx "Open" the Musca-AS.azone file
  - \ref zTUIGenerate "Generate" the related output files

The Musca-AS.azone file of that project has the following configuration settings:
  - \ref zTUICreate "Added the zones" \c SecureFW and \c NonsecureFW
  - \ref zTUIMemAdd "Created the memory regions" \c SecureRAM, \c NonsecureRAM, \c ScureCode, \c Veneer, and \c NonsecureCode
  - Selected various memory regions and peripherals for using in the different zones.

\image html muscaS1_zones.png

The zones use different Flash and SRAM regions for code and data. Peripherals, such as the system and IO configuration, as
well as UART0 are available in the secure world only. To generate the output, click on the \ref zTUIGenerate "Generate"
button in the Zone Editor tool bar. This creates the following files in the \c ftl_gen directory:

| Template File        | Generated File   | Description |
|:---------------------|:-----------------|:-------------|
| dump_fzone.txt.ftl   | dump_fzone.txt   | Contains the complete model  |
| helper.ftlinc        | N/A              | Helper template file with FTL functions. |
| mem_layout.h.ftl     | mem_layout.h     | Header file that contains the memory region definitions, for example for the linker scatter file. |
| tz_sau_nvic.c.ftl    | tz_sau_nvic.c    | Configuration of the secure attribution unit (SAU) and the NVIC interrupt assignment. |
| tz_mpc_ppc.c.ftl     | tz_mpc_ppc.c     | Configuration of the memory (MPC) and peripheral (PPC) protection controller. |

These files can be used in any IDE to create the final application.
*/

/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zTEM2351 Nuvoton NuMicro M2351

This single processor demo application shows how to do the \ref UseCase_TrustZone. It is split into a secure and non-secure
part. Some peripherals are assigned to either the secure or the non-secure zone to demonstrate the generation of PPC setup
and interrupt configuration in the partition.h template. Using CMSIS-Zone, it generates:
 - A header file that contains \#defines to control the various linker scatter files (and might be used in other parts of the
   application).
 - Secure attribution unit (SAU) setup.

The application itself shows how to implement calls between the secure and the non-secure part and how to use this to blink an
LED.


\section zTEM2351_Eclipse Using the CMSIS-Zone project

  - \ref zTExImport "Import" the project "Examples\M2351\Zone" into the CMSIS-Zone utility
  - \ref zTProjEx "Open" the M2351.azone file
  - \ref zTUIGenerate "Generate" the related output files

The M2351.azone file of that project has the following configuration settings:
  - \ref zTUICreate "Added the zones" \c Secure and \c NonSecure
  - \ref zTUIMemAdd "Created the memory regions" \c CODE_NS, \c CODE_S, \c Veneer, \c DATA_NS, and \c DATA_S
  - Selected various memory regions and peripherals for using in the different zones:
    \image html m2351_zones.png

The zones use different Flash and SRAM regions for code and data. To generate the output, click on the
\ref zTUIGenerate "Generate" button in the Zone Editor tool bar. This creates the following files in the \c ftl_gen
directory:

| Template File        | Generated File   | Description |
|:---------------------|:-----------------|:-------------|
| helper.ftlinc        | N/A              | Helper template file with FTL functions. |
| mem_layout.h.ftl     | mem_layout.h     | Header file that contains the memory region definitions, for example for the linker scatter file. |
| partition_gen.h.ftl  | partition_gen.h  | Configuration of the secure attribution unit (SAU) and the NVIC interrupt assignment. |
| scatter_ns.sct.ftl   | scatter_ns.sct   | Example scatter file for the non-secure zone. |
| scatter_s.sct.ftl    | scatter_s.sct    | Example scatter file for the secure zone. |

These files can be used in any IDE to create the final application. In the following, the usage in Arm Keil MDK is described.


\section zTEM2351_MDK Using the MDK project

The example project can be loaded, built and debugged in ÂµVision by performing the following steps:

-# Navigate to Examples/M2351/MDK
-# Open the multi-project workspace TrustZone.uvmpw
-# Optional: Update the generated files by executing the copy_gen.bat scripts in Secure\\mdk and NonSecure\\mdk
   folders.
-# Run the batch build in MDK. Both projects, Secure and NonSecure need to be compiled in order.
-# Set \c Secure as active project.
-# Connect the NuMaker-PFM-M2351 board using a Micro-USB cable at ICEJ.
-# Open <b>Options for Target - Debug</b> and make sure that the NULink Debugger is selected.
-# Launch a debug session and watch LEDG and LEDY blinking.


\section zTEM2351_MDK_Setup MDK project setup

The multiproject workspace contains the \c Secure project and the \c NonSecure project:

\image html m2351_proj_window.png

The projects use the files generated in CMSIS-Zone as follows:

| File               | Used in           | Description |
|:-------------------|:------------------|:------------|
| mem_layout.h       | Secure, NonSecure | Input for the scatter files. |
| partition_gen.h    | Secure            | Configuration of the secure attribution unit (SAU) and the NVIC interrupt assignment. |
| scatter_ns.sct     | NonSecure         | Scatter file for non-secure zone (initally based on generated file). |
| scatter_s.sct      | Secure            | Scatter file for secure zone (initally based on generated file). |

The scatter files \c scatter_s.sct and \c scatter_ns.sct are using a preinclude to mem_layout.h to get the information about
the different memory regions.

\note
If you want to learn more about the general project layout for an Armv8-M project using TrustZone, refer to
<a href="https://developer.arm.com/documentation/kan291/latest/" target="_blank">Application Note 291</a>.

\subsection zTEM2351_hwsScatter scatter_s.sct

As explained previously, the \#defines in \c mem_layout.h can be used to create generic scatter files that are easy
to update once changes in the CMSIS-Zone project happen. Using the \b mem_layout.h file from CMSIS-Zone, the following
scatter file is used in the \c Sections project:

\code
#! armclang -E --target=arm-arm-none-eabi -mcpu=cortex-m23 -I../ -xc

#include "mem_layout.h"

; *------- <<< Use Configuration Wizard in Context Menu >>> ------------------

;<h> Stack Configuration
;  <o> Stack Size (in Bytes) <0x0-0xFFFFFFFF:8>
;</h>
#define STACK_SIZE 0x400

;<h> Heap Configuration
;  <o> Heap Size (in Bytes) <0x0-0xFFFFFFFF:8>
;</h>
#define HEAP_SIZE 0xC00

; *-------------- <<< end of configuration section >>> -----------------------
LR_CODE_S REGION_CODE_S_START REGION_CODE_S_SIZE {
  ER_CODE_S REGION_CODE_S_START REGION_CODE_S_SIZE {
    * (RESET,+FIRST)
    * (InRoot$$Sections)
    .ANY (+RO +XO)
  }
  RW_DATA_S REGION_DATA_S_START REGION_DATA_S_SIZE-HEAP_SIZE-STACK_SIZE {
    .ANY (+RW +ZI)
  }
#if HEAP_SIZE>0
  ARM_LIB_HEAP REGION_DATA_S_START+REGION_DATA_S_SIZE-HEAP_SIZE-STACK_SIZE EMPTY HEAP_SIZE {
  }
#endif
#if STACK_SIZE>0
  ARM_LIB_STACK REGION_DATA_S_START+REGION_DATA_S_SIZE-STACK_SIZE EMPTY STACK_SIZE {
  }
#endif
}
LR_VENEER REGION_VENEER_START REGION_VENEER_SIZE {
  ER_VENEER REGION_VENEER_START REGION_VENEER_SIZE {
    *(Veneer$$CMSE)
  }
}
\endcode
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zTELPC55 NXP LPC55S69

This single processor demo application shows how to do the \ref UseCase_TrustZone. It is split into a secure and non-secure
part. Using CMSIS-Zone, it generates:
 - A header file that contains \#defines to control the various linker scatter files (and might be used in other parts of the
   application).
 - Memory protection controller (MPC) setup.
 - Peripheral protection controller (PPC) and related interrupt setup.
 - Secure attribution unit (SAU) setup.

The application itself shows how to implement calls between the secure and the non-secure part.


\section zTELPC55_Eclipse Using the CMSIS-Zone project

  - \ref zTExImport "Import" the project "Examples\LPC55S69\Zone" into the CMSIS-Zone utility
  - \ref zTProjEx "Open" the LPC55S69.azone file
  - \ref zTUIGenerate "Generate" the related output files

The LPC55S69.azone file of that project has the following configuration settings:
  - \ref zTUICreate "Added the zones" \c hello_world_s and \c hello_worls_ns
  - \ref zTUIMemAdd "Created the memory regions" \c CODE_NS, \c Config, \c CODE_S, \c Veneer, \c DATA_NS, and \c DATA_S
  - Selected various memory regions and peripherals for using in the different zones:
    \image html lpc55_zones.png

The zones use different Flash and SRAM regions for code and data, but share Flash configuration registers. Peripherals, such
as the system and IO configuration, as well as an UART are available in the secure world only. To generate the output, click
on the \ref zTUIGenerate "Generate" button in the Zone Editor tool bar. This creates the following files in the \c ftl_gen
directory:

| Template File        | Generated File   | Description |
|:---------------------|:-----------------|:-------------|
| dump_fzone.txt.ftl   | dump_fzone.txt   | Contains the complete model  |
| helper.ftlinc        | N/A              | Helper template file with FTL functions. |
| mem_layout.h.ftl     | mem_layout.h     | Header file that contains the memory region definitions, for example for the linker scatter file. |
| scatter_ns.sct.ftl   | scatter_ns.sct   | Example scatter file for the non-secure zone (currently not used in MDK). |
| scatter_s.sct.ftl    | scatter_s.sct    | Example scatter file for the secure zone (currently not used in MDK). |
| tzm_config_mpc.c.ftl | tzm_config_mpc.c | Setup of the memory protection controller (MPC). |
| tzm_config_ppc.c.ftl | tzm_config_ppc.c | Setup of the peripheral protection controller (PPC). |
| tzm_config_sau.c.ftl | tzm_config_sau.c | Configuration of the secure attribution unit (SAU) and the NVIC interrupt assignment. |

These files can be used in any IDE to create the final application. In the following, the usage in Arm Keil MDK is described.


\section zTELPC55_MDK Using the MDK project

The example project can be loaded, built and debugged in ÂµVision by performing the following steps:

-# Navigate to Examples/LPC55S69/MDK
-# Open the multi-project workspace hello_world.uvmpw
-# Optional: Update the generated files by executing the copy_gen.bat scripts in hello_world_s\\mdk and hello_world_ns\\mdk
   folders.
-# Run the batch build in MDK. Both projects, hello_world_s and hello_world_ns need to be compiled in order.
-# Set hello_world_s as active project.
-# Connect the LPC55S69-EVK using a Micro-USB cable at Debug Link (P6).
-# Open <b>Options for Target - Debug</b> and make sure that the CMSIS-DAP ARMv8-M Debugger is selected and the LPC-LINK2 is
   used.
-# Optional: Open a serial terminal program (i.e. PuTTY) on the virtual serial port provided in parallel to the debugger
   (e.g. USB Serial Device). Configure the port to 115200/8N1.
-# Launch a debug session and watch the serial console output:
   \image html hello_world_output.png

\section zTELPC55_MDK_Setup MDK project setup

The multiproject workspace contains the secure \c hello_world_s project and the non-secure \c hello_world_ns project:

\image html hello_world_proj_window.png

The projects use the files generated in CMSIS-Zone as follows:

| File               | Used in | Description |
|:-------------------|:--------|:------------|
| mem_layout.h       | hello_world_s, hello_world_ns | Input for the scatter files. |
| tzm_config_mpc.c   | hello_world_s | Functions called from tzm_config.c |
| tzm_config_ppc.c   | hello_world_s | Functions called from tzm_config.c |
| tzm_config_sau.c   | hello_world_s | Functions called from tzm_config.c |

The scatter files \c hello_world_s.sct and \c hello_world_ns.sct are based on the original scatter files from NXP and are
using a preinclude to mem_layout.h to get the information about the different memory regions.

\note
If you want to learn more about the general project layout for an Armv8-M project using TrustZone, refer to
<a href="https://developer.arm.com/documentation/kan291/latest/" target="_blank">Keil Application Note 291</a>.

\subsection zTELPC55_hwsScatter hello_world_s.sct

As explained previously, the \#defines in \c mem_layout.h can be used to create generic scatter files that are easy
to update once changes in the CMSIS-Zone project happen. Using the \b mem_layout.h file from CMSIS-Zone, the following
scatter file is used in the secure \c hello_world project:

\code
; Use Arm compiler 6 to pre-process the scatter file and pull in the defines from the mem_layout.h file:
#! armclang -E --target=arm-arm-none-eabi -mcpu=cortex-m33 -I../ -xc

#include "mem_layout.h"

; *------- <<< Use Configuration Wizard in Context Menu >>> ------------------

;<h> Stack Configuration
;  <o> Stack Size (in Bytes) <0x0-0xFFFFFFFF:8>
;</h>
#define STACK_SIZE 0x400

;<h> Heap Configuration
;  <o> Heap Size (in Bytes) <0x0-0xFFFFFFFF:8>
;</h>
#define HEAP_SIZE 0xC00

; *-------------- <<< end of configuration section >>> -----------------------

LR_CODE_S REGION_CODE_S_START REGION_CODE_S_SIZE {
  ER_CODE_S REGION_CODE_S_START REGION_CODE_S_SIZE {
    * (RESET,+FIRST)
    * (InRoot$$Sections)
    .ANY (+RO, +XO)
  }
  RW_DATA_S REGION_DATA_S_START REGION_DATA_S_SIZE-HEAP_SIZE-STACK_SIZE {
    .ANY (+RW +ZI)
  }
#if HEAP_SIZE>0
  ARM_LIB_HEAP REGION_DATA_S_START+REGION_DATA_S_SIZE-HEAP_SIZE-STACK_SIZE EMPTY HEAP_SIZE {
  }
#endif
#if STACK_SIZE>0
  ARM_LIB_STACK REGION_DATA_S_START+REGION_DATA_S_SIZE-STACK_SIZE EMPTY STACK_SIZE {
  }
#endif
}
LR_VENEER REGION_VENEER_START REGION_VENEER_SIZE {
  ER_VENEER REGION_VENEER_START REGION_VENEER_SIZE {
    *(Veneer$$CMSE)
  }
}
\endcode

\subsection zTELPC55_TZSetup TrustZone Setup at Startup

During the system initialization, the function \b SystemInitHook is called. This is used when application specific code needs
to be called as close to the reset entry as possible. In this example, this function calls \b BOARD_InitTrustZone, which
calls the three TZM_Config_* functions:

\image html lpc55_system_startup.png
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zTESTM32L5 STMicroelectronics STM32L5

This single processor demo application shows how to do the \ref UseCase_TrustZone. It is split into a secure and non-secure
part. Using CMSIS-Zone, it generates:
 - A header file that contains \#defines to control the various linker scatter files (and might be used in other parts of the
   application).
 - The SystemIsolation_Config.c header file that contains memory protection controller (MPC) and peripheral protection
   controller (PPC) and related interrupt setup.
 - The partition_gen.h header file that contains the secure attribution unit (SAU) setup and the NVIC configuration for secure/non-secure.

The application itself shows how to implement calls between the secure and the non-secure part.


\section zTESTM32L5_Eclipse Using the CMSIS-Zone project

  - \ref zTExImport "Import" the project "Examples\STM32L5\Zone" into the CMSIS-Zone utility
  - \ref zTProjEx "Open" the STM32L5.azone file
  - \ref zTUIGenerate "Generate" the related output files

The STM32L5.azone file of that project has the following configuration settings:
  - \ref zTUICreate "Added the zones" \c blinky_s and \c blinky_ns
  - \ref zTUIMemAdd "Created the memory regions" \c CODE_NS, \c CODE_S, \c Veneer, \c DATA_NS, and \c DATA_S
  - Selected various memory regions and peripherals for using in the different zones:
    \image html STM32L5_zones.png

The zones use different Flash and SRAM regions for code and data, but share Flash configuration registers. Peripherals, such
as the system and IO configuration, as well as an UART are available in the secure world only. To generate the output, click
on the \ref zTUIGenerate "Generate" button in the Zone Editor tool bar. This creates the following files in the \c ftl_gen
directory:

| Template File        | Generated File   | Description |
|:---------------------|:-----------------|:-------------|
| dump_fzone.txt.ftl   | dump_fzone.txt   | Contains the complete model  |
| helper.ftlinc        | N/A              | Helper template file with FTL functions. |
| mem_layout.h.ftl     | mem_layout.h     | Header file that contains the memory region definitions, for example for the linker scatter file. |
| partition_gen.h.ftl  | partition_gen.h  | Configuration of the secure attribution unit (SAU) and the NVIC interrupt assignment. |
| SystemIsolation_Config.c.ftl | SystemIsolation_Config.c | Setup of the MPC and PPC. |
| scatter_ns.sct.ftl   | scatter_ns.sct   | Example scatter file for non-secure zone. |
| scatter_s.sct.ftl    | scatter_s.sct    | Example scatter file for secure zone. |

These files can be used in any IDE to create the final application. In the following, the usage in Arm Keil MDK is described.


\section zTESTM32L5_MDK Using the MDK project

The example project can be loaded, built and debugged in ÂµVision by performing the following steps:

-# Navigate to Examples/STM32L5/MDK
-# Open the multi-project workspace blinky.uvmpw
-# Optional: Update the generated files by executing the copy_gen.bat scripts in blinky_s\\mdk and blinky_ns\\mdk
   folders.
-# Run the batch build in MDK. Both projects, blinky_s and blinky_ns need to be compiled in order.


\section zTESTM32L5_MDK_Setup MDK project setup

The multiproject workspace contains the secure \c blinky_s project and the non-secure \c blinky_ns project:

\image html blinky_window.png

The projects use the files generated in CMSIS-Zone as follows:

| File                       | Used in     | Description |
|:---------------------------|:------------|:------------|
| mem_layout.h               | blinky_s, blinky_ns | Input for the linker scatter files. |
| partition_gen.h            | blinky_s    | Configuration of the secure attribution unit (SAU) and the NVIC interrupt assignment. This file is included in the partition_stm32l5xx.h header file. |
| SystemIsolation_Config.c   | blinky_s    | Setup of the MPC and PPC. |
| blinky_ns.sct              | blinky_ns   | Scatter file for non-secure zone (initally based on generated file). |
| blinky_s.sct               | blinky_s    | Scatter file for secure zone (initally based on generated file). |
\note
If you want to learn more about the general project layout for an Armv8-M project using TrustZone, refer to
<a href="https://developer.arm.com/documentation/kan291/latest/" target="_blank">Keil Application Note 291</a>.

\subsection zTESTM32L5_hwsScatter blinky_s.sct

As explained previously, the \#defines in \c mem_layout.h can be used to create generic scatter files that are easy
to update once changes in the CMSIS-Zone project happen. Using the \b mem_layout.h file from CMSIS-Zone, the following
scatter file is used in the secure \c blinky project, which is based on the generated scatterf file (scatter_s.sct):

\code
; Use Arm compiler 6 to pre-process the scatter file and pull in the defines from the mem_layout.h file:
#! armclang -E --target=arm-arm-none-eabi -mcpu=cortex-m33 -I../ -xc

#include "mem_layout.h"

; *------- <<< Use Configuration Wizard in Context Menu >>> ------------------

;<h> Stack Configuration
;  <o> Stack Size (in Bytes) <0x0-0xFFFFFFFF:8>
;</h>
#define STACK_SIZE 0x400

;<h> Heap Configuration
;  <o> Heap Size (in Bytes) <0x0-0xFFFFFFFF:8>
;</h>
#define HEAP_SIZE 0xC00

; *-------------- <<< end of configuration section >>> -----------------------
LR_CODE_S REGION_CODE_S_START REGION_CODE_S_SIZE {
  ER_CODE_S REGION_CODE_S_START REGION_CODE_S_SIZE {
    * (RESET,+FIRST)
    * (InRoot$$Sections)
    .ANY (+RO +XO)
  }
  RW_DATA_S REGION_DATA_S_START REGION_DATA_S_SIZE-HEAP_SIZE-STACK_SIZE {
    .ANY (+RW +ZI)
  }
#if HEAP_SIZE>0
  ARM_LIB_HEAP REGION_DATA_S_START+REGION_DATA_S_SIZE-HEAP_SIZE-STACK_SIZE EMPTY HEAP_SIZE {
  }
#endif
#if STACK_SIZE>0
  ARM_LIB_STACK REGION_DATA_S_START+REGION_DATA_S_SIZE-STACK_SIZE EMPTY STACK_SIZE {
  }
#endif
}
LR_Veneer REGION_VENEER_START REGION_VENEER_SIZE {
  ER_Veneer REGION_VENEER_START REGION_VENEER_SIZE {
    *(Veneer$$CMSE)
  }
}
\endcode

The partition_gen.h header file contains Configuration Wizard annotation so that it can be viewed in a graphical window:

\image html partition_h_l5.png
*/

/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zTESAML11 Microchip SAML11

This single processor demo application shows how to do the \ref UseCase_TrustZone. It is split into a secure and non-secure
part. Using CMSIS-Zone, it generates:
 - A header file that contains \#defines to control the various linker scatter files (and might be used in other parts of the
   application).
 - The SystemIsolation_Config.c header file that contains memory protection controller (MPC) and peripheral protection
   controller (PPC) and related interrupt setup.
 - The partition_gen.h header file that contains the secure attribution unit (SAU) setup and the NVIC configuration for secure/non-secure.

The application itself shows how to implement calls between the secure and the non-secure part.


\section zTESAML11_Eclipse Using the CMSIS-Zone project

  - \ref zTExImport "Import" the project "Examples\SAML11\Zone" into the CMSIS-Zone utility
  - \ref zTProjEx "Open" the SAML11.azone file
  - \ref zTUIGenerate "Generate" the related output files

The SAML11.azone file of that project has the following configuration settings:
  - \ref zTUICreate "Added the zones" \c sApp and \c nsApp
  - \ref zTUIMemAdd "Created the memory regions" \c APP_NS, \c APP_S, \c APP_NSC, \c DATA_NS, \c DATA_S, \c RAM_NS, and \c RAM_NS
  - Selected various memory regions and peripherals for using in the different zones:
    \image html SAML11_zones.png

The zones use different Flash and SRAM regions for code and data. To generate the output, click
on the \ref zTUIGenerate "Generate" button in the Zone Editor tool bar. This creates the following files in the \c ftl_gen
directory:

| Template File        | Generated File   | Description |
|:---------------------|:-----------------|:-------------|
| dump_fzone.txt.ftl   | dump_fzone.txt   | Contains the complete model  |
| flash.dbgconf.ftl    | flash.dbgconf    | Flash algorithm configuration for security settings |
| flash.dbgconf.lst.ftl| flash.dbgconf.lst| Flash algorithm configuration for security settings |
| helper.ftlinc        | N/A              | Helper template file with FTL functions. |
| scatter_ns.sct.ftl   | scatter_ns.sct   | Example scatter file for non-secure zone. |
| scatter_s.sct.ftl    | scatter_s.sct    | Example scatter file for secure zone. |

These files can be used in any IDE to create the final application. In the following, the usage in Arm Keil MDK is described.

\section zTESAML11_MDK Using the MDK project

The example project can be loaded, built and debugged in ÂµVision by performing the following steps:

-# Navigate to Examples/SAML11/MDK
-# Open the multi-project workspace NoRTOS.uvmpw
-# Run the batch build in MDK. Both projects, sApp and nsApp need to be compiled in order.

*/

/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zTEMCB400 Keil MCBSTM32F400 Evaluation Board

This single processor demo application shows how to do the \ref UseCase_MPU. Using CMSIS-Zone, it generates:
 - A header file that contains \#defines to control the various linker scatter files (and might be used in other parts of the
   application).
 - The MPU configuration table source and header files. These contain MPU register settings used during thread switching
   to update accessible memory regions.

The application itself shows how to isolate network stack threads from the user application.


\section zTEMCB400_Eclipse Using the CMSIS-Zone project

  - \ref zTExImport "Import" the project "Examples\MCBSTM32F400\Zone" into the CMSIS-Zone utility
  - \ref zTProjEx "Open" the MCBSTM32F400.azone file
  - \ref zTUIGenerate "Generate" the related output files

The MCBSTM32F400.azone file of that project has the following configuration settings:
  - Project mode is set to \c Execution.
  - \ref zTUICreate "Added the zones" \c Net, \c Main, \c RTX, \c Blinky, \c Timer, \c Idle
  - \ref zTUIMemAdd "Created the memory regions" \c CODE, \c RAM_SHARED, \c RAM_NET, \c RAM_MAIN, \c RAM_PRIVILEGED,
    \c RAM_EVR, \c RAM_BSD, \c RAM_LED, \c RAM_ADC, \c RAM_TIMER, and \c RAM_IDLE
  - Selected various memory regions and peripherals for using in the different zones:
    \image html MCB400_zones.png

The zones use common Flash region for all the application code but different SRAM regions to segregate thread data.
To generate the output, click on the \ref zTUIGenerate "Generate" button in the Zone Editor tool bar. This creates
the following files in the \c ftl_gen directory:

| Template File        | Generated File   | Description |
|:---------------------|:-----------------|:-------------|
| dump_fzone.txt.ftl   | dump_fzone.txt   | Contains the complete model  |
| helper.ftlinc        | N/A              | Helper template file with FTL functions. |
| mem_layout.h.ftl     | mem_layout.h     | Header file that contains the memory region definitions, for example for the linker scatter file. |
| mputable.c.ftl       | mputable.c       | MPU Table data definition. |
| mputable.h.ftl       | mputable.h       | MPU Table data declaration. |
| scatter.sct.ftl      | scatter.sct      | Example scatter file for MPU protection. |


These files can be used in any IDE to create the final application. In the following, the usage in Arm Keil MDK is described.

\section zTEMCB400_MDK Using the MDK project

The example project can be loaded, built and debugged in ÂµVision by performing the following steps:

-# Navigate to Examples/MCBSTM32F400/MDK
-# Open the project workspace Blinky_Net.uvprojx
-# Optional: Update the generated files by executing the copy_gen.bat script.
-# Run the build in MDK.


\section zTEMCB400_MDK_Setup MDK project setup

The projects Blinky_Net use the files generated in CMSIS-Zone as follows:

| File                       | Description |
|:---------------------------|:------------|
| mem_layout.h               | Input for the linker scatter files. |
| mputable.c                 | MPU Table data definition. |
| mputable.h                 | MPU Table data declaration. |
| scatter.sct                | Initial template for scatter file. |

\subsection zTEMCB400_hwsScatter scatter.sct

As explained previously, the \#defines in \c mem_layout.h can be used to create generic scatter files that are easy
to update once changes in the CMSIS-Zone project happen. Using the \b mem_layout.h file from CMSIS-Zone, the following
scatter file is used in the \c Blinky_Net project, which is based on the generated scatter file template (scatter.sct):

\code
#! armclang -E --target=arm-arm-none-eabi -mcpu=cortex-m3 -xc

#include "mem_layout.h"

LR_CODE REGION_CODE_START REGION_CODE_SIZE {
  ER_CODE REGION_CODE_START REGION_CODE_SIZE {
    *.o (RESET,+FIRST)
    * (InRoot$$Sections)
    .ANY (+RO, +XO)
  }
  RW_RAM_PRIVILEGED REGION_RAM_PRIVILEGED_START REGION_RAM_PRIVILEGED_SIZE {
     Net_Config.o (.bss.os.*.cb)
    .ANY (+RW +ZI)
  }
  RW_RAM_SHARED REGION_RAM_SHARED_START REGION_RAM_SHARED_SIZE {
    system_stm32f4xx.o (.data.SystemCoreClock)
;   *.o (.data.shared)
    *.o (.bss.shared)
  }
  RW_RAM_EVR REGION_RAM_EVR_START UNINIT REGION_RAM_EVR_SIZE {
    EventRecorder.o (+ZI)
  }
  RW_RAM_BSD REGION_RAM_BSD_START REGION_RAM_BSD_SIZE {
    bsd.o (+RW +ZI)
  }
  RW_RAM_NET REGION_RAM_NET_START REGION_RAM_NET_SIZE {
    *Net*.lib (+RW +ZI)
    Net_Config.o (.bss*)
    emac_stm32f4xx.o (+RW +ZI)
    phy_ksz8081rna.o (+RW +ZI)
    phy_st802rt1.o (+RW +ZI)
  }
  RW_RAM_TIMER REGION_RAM_TIMER_START REGION_RAM_TIMER_SIZE {
    timer.o (+RW +ZI)
    *.o (.bss.os.thread.stack.rtx.timer)
  }
  RW_RAM_ADC REGION_RAM_ADC_START REGION_RAM_ADC_SIZE {
    adc.o (+RW +ZI)
    adc_mcbstm32f400.o (+RW +ZI)
  }
  RW_RAM_LED REGION_RAM_LED_START REGION_RAM_LED_SIZE {
    led.o (+RW +ZI)
  }
  RW_RAM_MAIN REGION_RAM_MAIN_START REGION_RAM_MAIN_SIZE {
    app.o (+RW +ZI)
  }
  RW_RAM_IDLE REGION_RAM_IDLE_START REGION_RAM_IDLE_SIZE {
    RTX_Config.o (+RW +ZI)
    *.o (.bss.os.thread.stack.rtx.idle)
  }
}
\endcode

The data segments of segregated software components have been allocated to distinct memory regions.
*/