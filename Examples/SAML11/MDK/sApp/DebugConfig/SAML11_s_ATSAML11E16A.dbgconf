// File: SAML11.dbgconf
// Version: 1.0.1
// Debug Configuration file for SAM L11 device. It defines device-specific parameters for debugger and target device.
// The local copy of the file is used in the project via "Options for Target.."=> "Debug" tab => "Settings.." button => "Pack" tab

// <<< Use Configuration Wizard in Context Menu >>>

// <h> Debugger Setup
// <i> Parameters configuring debugger on the PC.
// <i> The settings are not programmed on the connected device.
//   <h> Chip Erase
//   <i> Configuration of chip erase operation to be performed during device programming and debug
//     <o> Chip Erase Select
//     <i> Select chip erase level
//       <2=>  CE2 (Full Chip Erase)
//       <1=>  CE1 (Erase Secure + Non-Secure Application)
//       <0=>  CE0 (Erase Non-Secure Application)
CE_Select = 0x00000002;

//     <h> CE0 Erase Key
//       <o0> CE0 Erase Key Word 0
//       <o1> CE0 Erase Key Word 1
//       <o2> CE0 Erase Key Word 2
//       <o3> CE0 Erase Key Word 3
//     </h>
//     <i> Erase Key to be used by debugger for chip erase CE0
CE0_Keyword0 = 0xFFFFFFFF;
CE0_Keyword1 = 0xFFFFFFFF;
CE0_Keyword2 = 0xFFFFFFFF;
CE0_Keyword3 = 0xFFFFFFFF;

//     <h> CE1 Erase Key
//       <o0> CE1 Erase Key Word 0
//       <o1> CE1 Erase Key Word 1
//       <o2> CE1 Erase Key Word 2
//       <o3> CE1 Erase Key Word 3
//     </h>
//     <i> Erase Key to be used by debugger for chip erase CE1
CE1_Keyword0 = 0xFFFFFFFF;
CE1_Keyword1 = 0xFFFFFFFF;
CE1_Keyword2 = 0xFFFFFFFF;
CE1_Keyword3 = 0xFFFFFFFF;

//     <h> CE2 Erase Key
//       <o0> CE2 Erase Key Word 0
//       <o1> CE2 Erase Key Word 1
//       <o2> CE2 Erase Key Word 2
//       <o3> CE2 Erase Key Word 3
//     </h>
//     <i> Erase Key to be used by debugger for chip erase CE2
CE2_Keyword0 = 0xFFFFFFFF;
CE2_Keyword1 = 0xFFFFFFFF;
CE2_Keyword2 = 0xFFFFFFFF;
CE2_Keyword3 = 0xFFFFFFFF;

//   </h>
// </h>

// <h> Device Setup
// <i> Parameters configuring the SAM L11 device. 
// <i> The settings get programmed on the connected target during flash download.
// <i> Note: displayed values are not read from the device.
// <o> Debug Access Level
//   <2=>  DAL_2 (Full Debug Access)
//   <1=>  DAL_1 (Non-Secure Debug Access Only)
//   <0=>  DAL_0 (Debug Access Disabled)
// <i> Selects Debug Access Level programmed after flash download
ProgramDebugAccessLevel = 0x00000002;

//   <e0> Program User Configuration Row (UROW)
UROW_Program = 0x00000001;
// <i> Enable to program UROW with the specified parameter values during flash download.
// <i> Disable to avoid writing in UROW.
//     <q3.0> Write Enable (URWEN)
//     <i> URWEN parameter in UROW - check if UROW shall be writable.
//     <h> Secure Region Unlock Bits (SULCK)
//     <i> SULCK parameter in UROW: lock/unlock Secure NVM regions.
//     <i>The NVMCTRL gives the ability to lock regions defined in the Non-Volatile Memory (NVM).
//     <i>When a region is locked all modify (i.e. write or erase) commands directed to these regions are discarded.
//       <q0.0> Secure Boot Flash Unlocked
//       <i>The NVMCTRL gives the ability to lock regions defined in the Non-Volatile Memory (NVM).
//       <i>When a region is locked all modify (i.e. write or erase) commands directed to these regions are discarded.
//       <q0.1> Secure Application Flash Unlocked
//       <i>The NVMCTRL gives the ability to lock regions defined in the Non-Volatile Memory (NVM).
//       <i>When a region is locked all modify (i.e. write or erase) commands directed to these regions are discarded.
//       <q0.2> Secure Data Flash Unlocked
//       <i>The NVMCTRL gives the ability to lock regions defined in the Non-Volatile Memory (NVM).
//       <i>When a region is locked all modify (i.e. write or erase) commands directed to these regions are discarded.
//     </h>
//     <h> Non-Secure Region Unlock Bits (NSULCK)
//     <i> NSULCK parameter in UROW - lock/unlock Non-Secure NVM regions.
//     <i>The NVMCTRL gives the ability to lock regions defined in the Non-Volatile Memory (NVM).
//     <i>When a region is locked all modify (i.e. write or erase) commands directed to these regions are discarded.
//       <q0.3> Non-Secure Boot Flash Unlocked
//       <i>The NVMCTRL gives the ability to lock regions defined in the Non-Volatile Memory (NVM).
//       <i>When a region is locked all modify (i.e. write or erase) commands directed to these regions are discarded.
//       <q0.4> Non-Secure Application Flash Unlocked
//       <i>The NVMCTRL gives the ability to lock regions defined in the Non-Volatile Memory (NVM).
//       <i>When a region is locked all modify (i.e. write or erase) commands directed to these regions are discarded.
//       <q0.5> Non-Secure Data Flash Unlocked
//       <i>The NVMCTRL gives the ability to lock regions defined in the Non-Volatile Memory (NVM).
//       <i>When a region is locked all modify (i.e. write or erase) commands directed to these regions are discarded.
//     </h>

//     <h> Application Flash
//       <i>Specifies application flash split into secure and non-secure callable domains.
//       <i>The rest of the application flash is left as non-secure.
//       <o2.0..7> Secure Size (AS) (*= 0x100)
//       <i>AS parameter in UROW. Secure Application Flash Size = AS*0x100 Bytes.
//       <o2.8..13> Non-Secure Callable Size (ANSC)  (*= 0x20)
//       <i>ANSC parameter in UROW. Non-Secure Callable Flash Size = ANSC*0x20 Bytes.
//     </h>
//     <h> Data Flash
//       <i>DATA Flash configuration.
//       <q1.12> Execute Never (DXN)
//       <i>DXN parameter in UROW. Check to disable execution from DATA Flash.
//       <o2.16..19> Secure Size (DS) (*= 0x100)
//       <i>DS parameter in UROW. DATA Flash Secure Size = DS*0x100 Bytes.
//     </h>
//     <h> RAM
//       <i>RAM configuration.
//       <q1.11> Execute Never (RXN)
//       <i>RXN parameter in UROW. Check to disable execution from RAM.
//       <o2.24..30> Secure Size (RS) (*= 0x80)
//       <i>RS parameter in UROW. RAM Secure Size = RS*0x80 Bytes. The rest is left non-secure.
//     </h>
//     <h> Peripheral Security Setup
//       <i>Configures peripheral security attribution.
//       <h> Peripheral Bridge A (NONSECA)
//       <i>NONSECA parameter in UROW. Specifies peripheral security attribution.
//       <i>Check to enable corresponding peripheral in Non-Secure application.
//         <q4.1> PM: Power Manager Non-Secure
//         <q4.2> MCLK: Main Clock Non-Secure
//         <q4.3> RSTC: Reset Controller Non-Secure
//         <q4.4> OSCCTRL: Oscillators Controller Non-Secure
//         <q4.5> OSC32KCTRL: 32KHz Oscillators Controller Non-Secure
//         <q4.6> SUPC: Supply Controller Non-Secure
//         <q4.7> GCLK: Generic Clock Controller Non-Secure
//         <q4.8> WDT: Watchdog Timer Non-Secure
//         <q4.9> RTC: Real-Time Counter Non-Secure
//         <q4.10> EIC: External Interrupt Controller Non-Secure
//         <q4.11> FREQM: Frequency Meter Non-Secure
//         <q4.12> PORT: I/O Pin Controller Non-Secure
//         <q4.13> AC: Analog Comparators Non-Secure
//       </h>
//       <h> Peripheral Bridge B (NONSECB)
//       <i>NONSECB parameter in UROW. Specifies peripheral security attribution.
//       <i>Check to enable corresponding peripheral in Non-Secure application.
//         <q5.3> DMAC: Direct Memory Access Controller Non-Secure
//         <q5.4> HMATRIXHS: High-Speed Bus Matrix Non-Secure
//       </h> 
//       <h> Peripheral Bridge C (NONSECC)
//       <i>NONSECC parameter in UROW. Specifies peripheral security attribution.
//       <i>Check to enable corresponding peripheral in Non-Secure application.
//         <q6.0> EVSYS: Event System Non-Secure
//         <q6.1> SERCOM0: Serial Communication Interface 0 Non-Secure
//         <q6.2> SERCOM1: Serial Communication Interface 1 Non-Secure
//         <q6.3> SERCOM2: Serial Communication Interface 2 Non-Secure
//         <q6.4> TC0: Timer/Counter 0 Non-Secure
//         <q6.5> TC1: Timer/Counter 1 Non-Secure
//         <q6.6> TC2: Timer/Counter 2 Non-Secure
//         <q6.7> ADC: Analog-to-Digital Converter Non-Secure
//         <q6.8> DAC: Digital-to-Analog Converter Non-Secure
//         <q6.9> PTC: Peripheral Touch Controller Non-Secure
//         <q6.10> TRNG: True Random Number Generator Non-Secure
//         <q6.11> CCL: Configurable Custom Logic Non-Secure
//         <q6.12> OPAMP: Operational Amplifier Controller Non-Secure
//         <q6.13> TRAM: TrustRAM Non-Secure
//       </h>
//     </h>
//     <h> Watchdog Timer at power-on
//       <i>Watchdog parameters at power-on
//       <q0.25> Runstdby (WDT_RUNSTDBY)
//       <q0.26> Enable (WDT_ENABLE)
//       <q0.27> Always-on (WDT_ALWAYSON)
//       <o0.28..31> Period (WDT_PER)
//       <o1.4..7> Early Warning Interrupt Time Offset (WDT_EWOFFSET)
//       <e1.8> Window Mode Enable (WDT_WEN)
//         <o1.0..3> Window Mode Timeout (WDT_WINDOW)
//       </e>
//     </h>
//     <h> Brown-out Detection (BOD33)
//       <i>Brown-out Detection configuration
//       <q0.13> Disable at power-on
//       <i>BOD33 Disable parameter in UROW
//       <o0.14..15> Action at power-on
//       <i>BOD33 Action parameter in UROW
//         <0=> None
//         <1=> Generate Reset
//         <2=> Generate Interrupt
//       <o0.7..12> Threshold level at power-on
//       <i>BOD33 Level parameter in UROW
//       <q1.9> Hysteresis configuration at power-on
//       <i>BOD33_HYST parameter in UROW.
//     </h>
//   </e>
UROW_Config0 = 0xB000433F;
UROW_Config1 = 0x000018BB;
UROW_Config2 = 0x40082080;
UROW_Config3 = 0x00000001;
UROW_NONSECA = 0x00000000;
UROW_NONSECB = 0x00000000;
UROW_NONSECC = 0x00000000;

//   <e> Program Boot Configuration Row (BOCOR)
// <i> Enable to program BOCOR with the specified parameter values during flash download.
// <i> Disable to avoid writing in BOCOR.
BOCOR_Program = 0x00000001;
//     <o2> ROM Version (ROMVERSION)
//     <q1.16> WriteEnable (BCWEN)
//     <i> BCWEN parameter in BOCOR - check if BOCOR shall be writable.
//     <q1.17> Read Enable (BCREN)
//     <i> BCWREN parameter in BOCOR - check if BOCOR shall be readable.
//     <o0.24..25> Boot Option (BOOTOPT)
//     <h> Boot Protection
//       <o1.0..7> Protection Size (BOOTPROT) (*= 0x100)
//       <i> BOOTPROT parameter in BOCOR.  Boot Protection Size  = BOOTPPROT*0x100 Bytes
//       <o0.8..15> Secure Size (BS) (*= 0x100)
//       <i> BS parameter in BOCOR.  Boot Flash Secure Size  = BS*0x100 Bytes
//       <o0.16..21> Non-Secure Callable Size (BNSC) (*= 0x20)
//       <i> BNSC parameter in BOCOR.  Boot Flash Non-Secure Callable Size  = BNSC*0x20 Bytes
//     </h>
BOCOR_Config0      = 0xA0000000;
BOCOR_Config1      = 0x00030000;
BOCOR_ROMVersion   = 0x0000003A;
//     <h> Chip Erase Keys
//     <i> Key values protecting chip erase operations.
//       <h> CE0 Erase Key (CEKEY0)
//       <i> Chip Erase Key 0.
//         <o0> CE0 Erase Key Word 0
//         <o1> CE0 Erase Key Word 1
//         <o2> CE0 Erase Key Word 2
//         <o3> CE0 Erase Key Word 3
//       </h>
BOCOR_CE0_Keyword0 = 0xFFFFFFFF;
BOCOR_CE0_Keyword1 = 0xFFFFFFFF;
BOCOR_CE0_Keyword2 = 0xFFFFFFFF;
BOCOR_CE0_Keyword3 = 0xFFFFFFFF;
//       <h> CE1 Erase Key (CEKEY1)
//       <i> Chip Erase Key 1.
//         <o0> CE1 Erase Key Word 0
//         <o1> CE1 Erase Key Word 1
//         <o2> CE1 Erase Key Word 2
//         <o3> CE1 Erase Key Word 3
//       </h>
BOCOR_CE1_Keyword0 = 0xFFFFFFFF;
BOCOR_CE1_Keyword1 = 0xFFFFFFFF;
BOCOR_CE1_Keyword2 = 0xFFFFFFFF;
BOCOR_CE1_Keyword3 = 0xFFFFFFFF;
//       <h> CE2 Erase Key (CEKEY2)
//       <i> Chip Erase Key 2.
//         <o0> CE2 Erase Key Word 0
//         <o1> CE2 Erase Key Word 1
//         <o2> CE2 Erase Key Word 2
//         <o3> CE2 Erase Key Word 3
//       </h>
BOCOR_CE2_Keyword0 = 0xFFFFFFFF;
BOCOR_CE2_Keyword1 = 0xFFFFFFFF;
BOCOR_CE2_Keyword2 = 0xFFFFFFFF;
BOCOR_CE2_Keyword3 = 0xFFFFFFFF;
//     </h>
//     <h> CRC Key (CRCKEY)
//     <i> Access key for the NVM Memory Regions Integrity Checks (command CMD_ CRC).
//     <i> If set to all 0s any access to the command is prevented.
//       <o0> CRC Key Word 0
//       <o1> CRC Key Word 1
//       <o2> CRC Key Word 2
//       <o3> CRC Key Word 3
//     </h>
BOCOR_CRC_Keyword0 = 0xFFFFFFFF;
BOCOR_CRC_Keyword1 = 0xFFFFFFFF;
BOCOR_CRC_Keyword2 = 0xFFFFFFFF;
BOCOR_CRC_Keyword3 = 0xFFFFFFFF;
//     <h> Secure Boot Key (BOOTKEY)
//     <i> Secure Boot Key used during secure boot integrity checks when SHA with BOOTKEY is selected (BOOTOPT>1).
//       <o0> Secure Boot Key Word 0
//       <o1> Secure Boot Key Word 1
//       <o2> Secure Boot Key Word 2
//       <o3> Secure Boot Key Word 3
//       <o4> Secure Boot Key Word 4
//       <o5> Secure Boot Key Word 5
//       <o6> Secure Boot Key Word 6
//       <o7> Secure Boot Key Word 7
//     </h>
BOCOR_BOOT_Keyword0 = 0xFFFFFFFF;
BOCOR_BOOT_Keyword1 = 0xFFFFFFFF;
BOCOR_BOOT_Keyword2 = 0xFFFFFFFF;
BOCOR_BOOT_Keyword3 = 0xFFFFFFFF;
BOCOR_BOOT_Keyword4 = 0xFFFFFFFF;
BOCOR_BOOT_Keyword5 = 0xFFFFFFFF;
BOCOR_BOOT_Keyword6 = 0xFFFFFFFF;
BOCOR_BOOT_Keyword7 = 0xFFFFFFFF;
//  </e>
// </h>

// <<< end of configuration section >>>